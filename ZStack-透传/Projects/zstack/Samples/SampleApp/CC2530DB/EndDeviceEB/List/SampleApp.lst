###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         24/May/2024  18:15:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\Source\SampleApp.c                #
#    Command line       =  -f C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\¡ı—Ó…≠\Desktop\ZSt #
#                          ack-1\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x7777                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\¡ı—Ó…≠\Desktop\ZSt #
#                          ack-1\Projects\zstack\Samples\SampleApp\Source\Sam #
#                          pleApp.c -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC   #
#                          -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC        #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\EndDeviceEB\List\ -lA    #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\EndDeviceEB\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\EndDeviceEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\ -I                   #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\Source\ -I            #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ #
#                           -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\hal\include\ -I C:\Users\¡ı—Ó…≠\Desktop\ZSta #
#                          ck-1\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530EB\ -I    #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\include\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\high_level\ -I             #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\ -I                          #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\single_chip\ -I              #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mt\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\osal\include\ -I                        #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\services\saddr\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStac #
#                          k-1\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\services\sdata\ -I          #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\af\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\nwk\ -I                     #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\sec\ -I                   #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sys\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\ -I C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\zmac\f8w\ -Ohz --require_prototypes   #
#    List file          =  C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\EndDeviceEB\List\SampleA #
#                          pp.lst                                             #
#    Object file        =  C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\EndDeviceEB\Obj\SampleAp #
#                          p.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\¡ı—Ó…≠\Desktop\ZStack-1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ÔøΩAS ISÔø?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include "hal_uart.h"
     76          #include "MT_UART.h"
     77          #include "MT_APP.h"
     78          #include "MT.h"
     79          #include "string.h"
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     98          {
     99            SAMPLEAPP_PERIODIC_CLUSTERID,
    100            SAMPLEAPP_FLASH_CLUSTERID
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          //afAddrType_t Point_To_Point_DstAddr;
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    153          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          void SampleApp_SendPeriodicMessage( void );
    155          void SampleApp_SendFlashMessage( uint16 flashTime );
    156          
    157          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    158          //void SampleApp_SerialMSG(mtOSALSerialData_t *sd);
    159          //void SampleApp_SendPointToPointMessage(void);
    160          /*********************************************************************
    161           * NETWORK LAYER CALLBACKS
    162           */
    163          
    164          /*********************************************************************
    165           * PUBLIC FUNCTIONS
    166           */
    167          
    168          /*********************************************************************
    169           * @fn      SampleApp_Init
    170           *
    171           * @brief   Initialization function for the Generic App Task.
    172           *          This is called during initialization and should contain
    173           *          any application specific initialization (ie. hardware
    174           *          initialization/setup, table initialization, power up
    175           *          notificaiton ... ).
    176           *
    177           * @param   task_id - the ID assigned by OSAL.  This ID should be
    178           *                    used to send messages and set timers.
    179           *
    180           * @return  none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    183          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    184            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    185            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    186            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    187          //‰∏≤Âè£ÂàùÂßãÔø?  
    188            MT_UartInit ();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    189            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    190            // Device hardware initialization can be added here or in main() (Zmain.c).
    191            // If the hardware is application specific - add it here.
    192            // If the hardware is other parts of the device add it in main().
    193          
    194           #if defined ( BUILD_ALL_DEVICES )
    195            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    196            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    197            // together - if they are - we will start up a coordinator. Otherwise,
    198            // the device will start as a router.
    199            if ( readCoordinatorJumper() )
    200              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    201            else
    202              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    203          #endif // BUILD_ALL_DEVICES
    204          
    205          #if defined ( HOLD_AUTO_START )
    206            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    207            //  from starting the device and wait for the application to
    208            //  start the device.
    209            ZDOInitDevice(0);
    210          #endif
    211          //ËøôÊÆµÊòØÂä†Ôø?  
    212           // Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//ËøôË°å‰ª£Á†ÅËÆæÁΩÆ‰∫ÜÁõÆÊ†áËÆæÂ§áÁöÑÁ´ØÁÇπÂè∑„ÄÇÁ´ØÁÇπÂú®Zigbee‰∏≠ÂÆö‰πâ‰∫ÜËÆæÂ§á‰∏äÁöÑ‰∏çÂêåÂäüËÉΩÊàñÊúçÂä°ÔºåÂÆö‰πâÔø?0
    213           // Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    214           // Point_To_Point_DstAddr.addr.shortAddr = 0x0000;//ÂèëÈÄÅÁªôÂçèË∞ÉÔø?//end
    215          
    216            // Setup for the periodic message's destination address
    217            // Broadcast to everyone
    218            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    220            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
    221          
    222            // Setup for the flash command's destination address - Group 1
    223            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC     DPTR
   \   000037   7414         MOV     A,#0x14
   \   000039   F0           MOVX    @DPTR,A
    225            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00003D   7401         MOV     A,#0x1
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    226          
    227            // Fill out the endpoint description.
    228            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   90....       MOV     DPTR,#SampleApp_epDesc
   \   000046   7414         MOV     A,#0x14
   \   000048   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000050   F0           MOVX    @DPTR,A
    230            SampleApp_epDesc.simpleDesc
    231                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000051   A3           INC     DPTR
   \   000052   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000058   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000059   A3           INC     DPTR
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
    233          
    234            // Register the endpoint description with the AF
    235            afRegister( &SampleApp_epDesc );
   \   00005C                ; Setup parameters for call to function afRegister
   \   00005C   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00005E   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   12....       LCALL   ??afRegister?relay
    236          
    237            // Register for all key events - This app will handle all key events
    238            RegisterForKeys( SampleApp_TaskID );
   \   000063                ; Setup parameters for call to function RegisterForKeys
   \   000063   90....       MOV     DPTR,#SampleApp_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??RegisterForKeys?relay
    239          
    240            // By default, all devices start out in Group 1
    241            SampleApp_Group.ID = 0x0001;
   \   00006B   90....       MOV     DPTR,#SampleApp_Group
   \   00006E   7401         MOV     A,#0x1
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    242            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000077   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00007A   F5..         MOV     ?V0 + 2,A
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   7C07         MOV     R4,#0x7
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000087   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000089   12....       LCALL   ??osal_memcpy?relay
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
    243            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000091                ; Setup parameters for call to function aps_AddGroup
   \   000091   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000093   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000095   7914         MOV     R1,#0x14
   \   000097   12....       LCALL   ??aps_AddGroup?relay
    244            
    245          #if defined ( LCD_SUPPORTED )
    246            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    247          #endif
    248          }
   \   00009A   7F03         MOV     R7,#0x3
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          
    250          /*********************************************************************
    251           * @fn      SampleApp_ProcessEvent
    252           *
    253           * @brief   Generic Application Task event processor.  This function
    254           *          is called to process all events for the task.  Events
    255           *          include timers, messages and any other user defined events.
    256           *
    257           * @param   task_id  - The OSAL assigned task ID.
    258           * @param   events - events to process.  This is a bit map and can
    259           *                   contain more than one event.
    260           *
    261           * @return  none
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    264          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    265            afIncomingMSGPacket_t *MSGpkt;
    266            (void)task_id;  // Intentionally unreferenced parameter
    267          
    268            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    269            {
    270              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??SampleApp_ProcessEvent_1
    271              while ( MSGpkt )
    272              {
    273                switch ( MSGpkt->hdr.event )
    274                {
    275                  case CMD_SERIAL_MSG:  
    276                      SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    277                    //SampleApp_SerialMSG((mtOSALSerialData_t *)MSGpkt);
    278                    break;
    279                    
    280                  // Received when a key is pressed
    281                  case KEY_CHANGE:
    282                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    283                    break;
    284          
    285                  // Received when a messages is received (OTA) for this endpoint
    286                  case AF_INCOMING_MSG_CMD:
    287                    SampleApp_MessageMSGCB( MSGpkt );
    288                    break;
    289          
    290                  // Received whenever the device changes state in the network
    291                  case ZDO_STATE_CHANGE:
    292                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    293                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    294                         ||(SampleApp_NwkState == DEV_ROUTER)
    295                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??SampleApp_ProcessEvent_4
    296                    {
    297                      // Start sending the periodic message in a regular interval.
    298                      osal_start_timerEx( SampleApp_TaskID,
    299                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    300                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7C88         MOV     R4,#-0x78
   \   000028   7D13         MOV     R5,#0x13
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    301                    }
    302                    else
    303                    {
    304                      // Device is no longer in the network
    305                    }
    306                    break;
    307                    
    308                    
    309          
    310                  default:
    311                    break;
    312                }
    313          
    314                // Release the memory
    315                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    316          
    317                // Next - if one is available
    318                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   14           DEC     A
   \   000057   600E         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24E7         ADD     A,#-0x19
   \   00005B   6027         JZ      ??SampleApp_ProcessEvent_7
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   600F         JZ      ??SampleApp_ProcessEvent_8
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AD         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000067                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_SerialCMD?relay
   \   00006E   80C6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000082   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000084                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00008B   80A9         SJMP    ??SampleApp_ProcessEvent_4
    319              }
    320          
    321              // return unprocessed events
    322              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   000092   FB           MOV     R3,A
   \   000093   802A         SJMP    ??SampleApp_ProcessEvent_10
    323            }
    324          
    325            // Send a message out - This event is generated by a timer
    326            //  (setup in SampleApp_Init()).
    327            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000095   EE           MOV     A,R6
   \   000096   A2E0         MOV     C,0xE0 /* A   */.0
   \   000098   5021         JNC     ??SampleApp_ProcessEvent_11
    328            {
    329              // Send the periodic message
    330              SampleApp_SendPeriodicMessage();
   \   00009A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    331               // SampleApp_SendPointToPointMessage();
    332              // Setup to send message again in normal period (+ a little jitter)
    333              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    334                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009D                ; Setup parameters for call to function osal_rand
   \   00009D   12....       LCALL   ??osal_rand?relay
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2488         ADD     A,#-0x78
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   3413         ADDC    A,#0x13
   \   0000A7   FD           MOV     R5,A
   \   0000A8   7A01         MOV     R2,#0x1
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    335          
    336              // return unprocessed events
    337              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   6401         XRL     A,#0x1
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   80D7         SJMP    ??SampleApp_ProcessEvent_9
    338            }
    339          
    340            // Discard unknown events
    341            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BF   7F04         MOV     R7,#0x4
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          }
    343          
    344          /*********************************************************************
    345           * Event Generation Functions
    346           */
    347          /*********************************************************************
    348           * @fn      SampleApp_HandleKeys
    349           *
    350           * @brief   Handles all key events for this device.
    351           *
    352           * @param   shift - true if in shift/alt.
    353           * @param   keys - bit field for key events. Valid entries:
    354           *                 HAL_KEY_SW_2
    355           *                 HAL_KEY_SW_1
    356           *
    357           * @return  none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    360          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    361            (void)shift;  // Intentionally unreferenced parameter
    362            
    363            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    364            {
    365              /* This key sends the Flash Command is sent to Group 1.
    366               * This device will not receive the Flash Command from this
    367               * device (even if it belongs to group 1).
    368               */
    369              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    370            }
    371          
    372            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    373            {
    374              /* The Flashr Command is sent to Group 1.
    375               * This key toggles this device in and out of group 1.
    376               * If this device doesn't belong to group 1, this application
    377               * will not receive the Flash command sent to group 1.
    378               */
    379              aps_Group_t *grp;
    380              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    381              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    382              {
    383                // Remove from the group
    384                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    385              }
    386              else
    387              {
    388                // Add to the flash group
    389                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    390              }
    391            }
    392          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    393          
    394          /*********************************************************************
    395           * LOCAL FUNCTIONS
    396           */
    397          
    398          /*********************************************************************
    399           * @fn      SampleApp_MessageMSGCB
    400           *
    401           * @brief   Data message processor callback.  This function processes
    402           *          any incoming data - probably from other devices.  So, based
    403           *          on cluster ID, perform the intended action.
    404           *
    405           * @param   none
    406           *
    407           * @return  none
    408           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    410          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    411            uint16 flashTime;
    412            uint8 i,len;
    413            //uint8 *ch = &pkt->cmd.Data[0];
    414            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0200         DW        2
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    415            {
    416              /*
    417              case SAMPLEAPP_POINT_TO_POINT_CLUSTERID:
    418                 //ÂèëÈÄÅËÆæÂ§áÁöÑÁü≠Âú∞ÂùÄÂú®pkt--srcAddr--addr--shortAddr
    419                  if(pkt->cmd.Data[0]==1)
    420                  //1Ë¢´ÊàëÊîπÊàê‰∫ÜÂçèË∞ÉÂô®
    421                    HalUARTWrite(0,"Router shortAddr:0x",19);
    422                  if(pkt->cmd.Data[0]==2)
    423                    HalUARTWrite(0,"End Device shortAddr:0x",23);
    424                  if(pkt->cmd.Data[0]==3)
    425                    HalUARTWrite(0,"Error shortAddr:0x",18);
    426          
    427                  HalUARTWrite(0, &num[temp/4096], 1);
    428                   HalUARTWrite(0, &num[temp%4096/256], 1);
    429                    HalUARTWrite(0, &num[temp%256/16], 1);
    430                     HalUARTWrite(0, &num[temp%16], 1);
    431                     HalUARTWrite(0, "\n", 1);
    432              break;
    433              */
    434              
    435              case SAMPLEAPP_COM_CLUSTERID:    //»Áπ˚ «¥Æø⁄Õ∏¥´µƒ–≈œ¢
    436          		len=pkt->cmd.Data[0];
   \                     ??SampleApp_MessageMSGCB_2:
   \   000026   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000029   F583         MOV     DPH,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
    437          		for(i=0;i<len;i++)
   \   000030   75..00       MOV     ?V0 + 0,#0x0
   \                     ??SampleApp_MessageMSGCB_3:
   \   000033   E5..         MOV     A,?V0 + 0
   \   000035   C3           CLR     C
   \   000036   95..         SUBB    A,?V0 + 1
   \   000038   5051         JNC     ??SampleApp_MessageMSGCB_0
    438          			HalUARTWrite(0,&pkt->cmd.Data[i+1],1);//∑¢∏¯PCª˙
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7C01         MOV     R4,#0x1
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   A8..         MOV     R0,?V0 + 0
   \   000040   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000043   28           ADD     A,R0
   \   000044   FA           MOV     R2,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   3400         ADDC    A,#0x0
   \   000049   8A82         MOV     DPL,R2
   \   00004B   F583         MOV     DPH,A
   \   00004D   A3           INC     DPTR
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
   \   000057   05..         INC     ?V0 + 0
   \   000059   80D8         SJMP    ??SampleApp_MessageMSGCB_3
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005B   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00005E   F9           MOV     R1,A
   \   00005F                ; Setup parameters for call to function HalLedBlink
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   8882         MOV     DPL,R0
   \   000068   8983         MOV     DPH,R1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   EA           MOV     A,R2
   \   00006F   2400         ADD     A,#0x0
   \   000071   F5..         MOV     ?V0 + 0,A
   \   000073   E4           CLR     A
   \   000074   39           ADDC    A,R1
   \   000075   F5..         MOV     ?V0 + 1,A
   \   000077   7402         MOV     A,#0x2
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?US_SHR
   \   00007E   AC..         MOV     R4,?V0 + 0
   \   000080   AD..         MOV     R5,?V0 + 1
   \   000082   7B32         MOV     R3,#0x32
   \   000084   7A04         MOV     R2,#0x4
   \   000086   7908         MOV     R1,#0x8
    439                		//HalUARTWrite(0,"\n",1);               // ªÿ≥µªª––
    440                break;
    441          /*
    442              case SAMPLEAPP_SERIAL_CLUSTERID:
    443           
    444                 
    445           
    446                 HalUARTWrite(0, "friend:", 7);      
    447           
    448                 HalUARTWrite(0, ch, pkt->cmd.DataLength-1);
    449           
    450                 HalUARTWrite(0, "\n", 1);
    451           
    452                 break;
    453           */     
    454              case SAMPLEAPP_PERIODIC_CLUSTERID:
    455                break;
    456          
    457              case SAMPLEAPP_FLASH_CLUSTERID:
    458                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    459                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000088   12....       LCALL   ??HalLedBlink?relay
    460                break;
    461            }
    462          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00008B   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    463          
    464          /*********************************************************************
    465           * @fn      SampleApp_SendPeriodicMessage
    466           *
    467           * @brief   Send the periodic message.
    468           *
    469           * @param   none
    470           *
    471           * @return  none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    474          {//¡™Õ¯∫ÛΩ¯»Î’‚∏ˆ∫Ø ˝
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    475            //uint8 *buff=NULL;
    476            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    477                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    478                                 1,
    479                                 (uint8*)&SampleAppPeriodicCounter,
    480                                 &SampleApp_TransID,
    481                                 AF_DISCV_ROUTE,
    482                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    483            {
    484            }
    485            else
    486            {
    487              // Error occurred in request to send.
    488            }
    489          }
    490          
    491          /*********************************************************************
    492           * @fn      SampleApp_SendFlashMessage
    493           *
    494           * @brief   Send the flash message to group 1.
    495           *
    496           * @param   flashTime - in milliseconds
    497           *
    498           * @return  none
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    501          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    502            uint8 buffer[3];
    503            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    504            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    505            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    506          
    507            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    508                                 SAMPLEAPP_FLASH_CLUSTERID,
    509                                 3,
    510                                 buffer,
    511                                 &SampleApp_TransID,
    512                                 AF_DISCV_ROUTE,
    513                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    514            {
    515            }
    516            else
    517            {
    518              // Error occurred in request to send.
    519            }
    520          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    521          
    522          /*********************************************************************
    523          *********************************************************************/
    524          /*
    525          void SampleApp_SendPointToPointMessage(void)//Ëá™Â∑±ÂÜôÁöÑÂçïÊí≠ÂáΩÊï∞
    526          {
    527              uint8 device;
    528              if(SampleApp_NwkState == DEV_ROUTER)
    529                device=0x01;//ÂçèË∞ÉÔø?    
    530              else if(SampleApp_NwkState == DEV_END_DEVICE)
    531                device=0x02;//ÁªàÁ´Ø
    532              else  device=0x03;//Âá∫Èîô
    533              if ( AF_DataRequest( &Point_To_Point_DstAddr, &SampleApp_epDesc,SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    534              1, &device, &SampleApp_TransID,AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    535              {
    536          
    537              }
    538              else{
    539                // Error occurred in request to send.
    540              }
    541          }
    542          */
    543          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    545          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    546          	uint8 i,len,*str=NULL;     //len”–”√ ˝æ›≥§∂»
    547          	str=cmdMsg->msg;          //÷∏œÚ ˝æ›ø™Õ∑
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 1,A
    548          	len=*str;                //msg¿Ôµƒµ⁄1∏ˆ◊÷Ω⁄¥˙±Ì∫Û√Êµƒ ˝æ›≥§∂»
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 4,A
    549          	
    550          	for(i=1;i<=len;i++)
   \   00001A   7E01         MOV     R6,#0x1
   \   00001C   8016         SJMP    ??SampleApp_SerialCMD_0
    551          		HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_SerialCMD_1:
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C01         MOV     R4,#0x1
   \   000020   7D00         MOV     R5,#0x0
   \   000022   8E..         MOV     ?V0 + 2,R6
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   25..         ADD     A,?V0 + 2
   \   000028   FA           MOV     R2,A
   \   000029   E5..         MOV     A,?V0 + 1
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FB           MOV     R3,A
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
   \   000033   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   000034   E5..         MOV     A,?V0 + 4
   \   000036   C3           CLR     C
   \   000037   9E           SUBB    A,R6
   \   000038   50E4         JNC     ??SampleApp_SerialCMD_1
    552          	//HalUARTWrite(0,"\n",1 );//ªª––  
    553          	
    554          	if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    555          						SAMPLEAPP_COM_CLUSTERID,//◊‘º∫∂®“Â“ª∏ˆ
    556          						len+1,                //  ˝æ›≥§∂»         
    557          						str,                     // ˝æ›ƒ⁄»›
    558          						&SampleApp_TransID, 
    559          						AF_DISCV_ROUTE,
    560          					AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00003A                ; Setup parameters for call to function AF_DataRequest
   \   00003A   75..1E       MOV     ?V0 + 2,#0x1e
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   75....       MOV     ?V0 + 2,#SampleApp_TransID & 0xff
   \   000045   75....       MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
   \   000048   78..         MOV     R0,#?V0 + 2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   E5..         MOV     A,?V0 + 4
   \   000054   2401         ADD     A,#0x1
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   E4           CLR     A
   \   000059   3400         ADDC    A,#0x0
   \   00005B   F5..         MOV     ?V0 + 1,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   75..03       MOV     ?V0 + 0,#0x3
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7920         MOV     R1,#0x20
   \   00006F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000071   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000073   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000077   12....       LCALL   ??AF_DataRequest?relay
   \   00007A   7409         MOV     A,#0x9
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    561          	{
    562          	}
    563          	else
    564          	{
    565          	// Error occurred in request to send.
    566          	} 
    567          }
   \   00007F   7F06         MOV     R7,#0x6
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100
    568          
    569           
    570           
    571             //’‚∏ˆ «∑¢ÀÕ ˝æ›∞¸µƒ∫Ø ˝£¨∏¥÷∆∫Û–ﬁ∏ƒ≤Œ ˝º¥ø…
    572           /*
    573             void SampleApp_SerialMSG(mtOSALSerialData_t *sd)
    574           
    575           {
    576           
    577             uint8 len = sd->msg[0];
    578           
    579             uint8 *ch = &sd->msg[1];
    580           
    581             
    582           
    583          //   HalUARTWrite(0, "I:", 2);
    584           
    585            HalUARTWrite(0, ch, len);
    586           
    587          //  HalUARTWrite(0, "\n", 1);
    588           
    589             
    590           
    591            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    592          
    593                                  SAMPLEAPP_SERIAL_CLUSTERID,
    594           
    595                                  len+1,
    596          
    597                                  ch,
    598           
    599                                  &SampleApp_TransID,
    600           
    601                                  AF_DISCV_ROUTE,
    602           
    603                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    604           
    605             {
    606           
    607            }
    608           
    609             else
    610           
    611             {
    612           
    613               // Error occurred in request to send.
    614           
    615             }
    616           
    617           }
    618          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SerialCMD                0      0     35
       -> HalUARTWrite                  0      0     28
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     SampleApp_ClusterList                    6
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         159
     SampleApp_ProcessEvent                 196
     SampleApp_HandleKeys                    61
     ??Subroutine3_0                          5
     SampleApp_MessageMSGCB                 142
     ?Subroutine1                             7
     ?Subroutine2                            12
     ?Subroutine0                             3
     SampleApp_SendPeriodicMessage           69
     SampleApp_SendFlashMessage             118
     SampleApp_SerialCMD                    132
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_SerialCMD?relay              6
     ?<Constant "Group 1">                    8

 
 904 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  26 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 946 bytes of CODE  memory
  26 bytes of CONST memory
  53 bytes of XDATA memory

Errors: none
Warnings: none
